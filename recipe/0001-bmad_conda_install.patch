diff --git a/bmad/CMakeLists.txt b/bmad/CMakeLists.txt
index 5ae8067e..824a49d4 100644
--- a/bmad/CMakeLists.txt
+++ b/bmad/CMakeLists.txt
@@ -7,8 +7,16 @@ SET (CREATE_SHARED true)
 
 SET (PLOT_LINK_LIBS $ENV{PLOT_LINK_LIBS})
 
-SET (INC_DIRS
+# If this is a conda build, xraylib is contained
+# one level deeper in the include folder
+IF ($ENV{ACC_CONDA_BUILD})
+  SET (INC_DIRS
+    $ENV{ACC_CONDA_PATH}/include/xraylib/
   )
+ELSE ()
+  SET (INC_DIRS
+  )
+ENDIF ()
 
 SET (SRC_DIRS 
   code 
diff --git a/build_system/Master.cmake b/build_system/Master.cmake
index bad48575..10572b87 100644
--- a/build_system/Master.cmake
+++ b/build_system/Master.cmake
@@ -241,7 +241,7 @@ ENDIF ()
 
 IF (${CMAKE_SYSTEM_NAME} MATCHES "Linux" AND NOT $ENV{ACC_PLOT_PACKAGE} MATCHES "none")
   SET (ACC_PLOT_LIB_DIRS /usr/lib64)
-ELSEIF (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
+ELSEIF (${CMAKE_SYSTEM_NAME} MATCHES "Darwin" AND "$ENV{ACC_USE_MACPORTS}" MATCHES "Y")
   SET (ACC_PLOT_LIB_DIRS /opt/local/lib /opt/X11/lib)
 ENDIF ()
 
diff --git a/fgsl/acc_build_fgsl b/fgsl/acc_build_fgsl
index 3d4e593b..bc8dfa0c 100755
--- a/fgsl/acc_build_fgsl
+++ b/fgsl/acc_build_fgsl
@@ -16,31 +16,42 @@ func_configure_make_install () {
             ;;
     esac
 
+    case "${ACC_CONDA_BUILD}" in
+        "Y" | "y" | "1" )
+            CONDA_BUILD=1
+            ;;
+    esac
+
     cd ${WORK_DIR}
 
     [ ${BUILD_SHARED} ] && CONFIGURE_FLAGS="--enable-shared" || CONFIGURE_FLAGS="--disable-shared"
 
     if [ ! -e ALREADY_BUILT ] ; then
 
-	if [ ${DIST_BUILD} ] ; then
-		 GSL_VERSION=$(cat ${DIST_BASE_DIR}/gsl/VERSION | awk ' { print $3 } ')
+	if ( [[ "${CONDA_BUILD}" ]] ) ; then
+		export GSLLIBDIR=${ACC_CONDA_PATH}/lib
+		export GSLINCDIR=${ACC_CONDA_PATH}/include
+		echo -e "Using GSL library from conda in ${GSLLIBDIR}\n"
 	else
-		 GSL_VERSION=$(cat ${ACC_BASE}/packages/gsl/VERSION | awk ' { print $3 } ')
+		if [ ${DIST_BUILD} ] ; then
+			 GSL_VERSION=$(cat ${DIST_BASE_DIR}/gsl/VERSION | awk ' { print $3 } ')
+		else
+			 GSL_VERSION=$(cat ${ACC_BASE}/packages/gsl/VERSION | awk ' { print $3 } ')
+		fi
+
+		if ( [ -d ${ACC_BASE}/packages ] && [[ "${ACC_BASE}/packages/${BUILD_TYPE}/lib/libgsl*" ]] ) ; then
+		    export GSLLIBDIR=${ACC_BASE}/packages/${BUILD_TYPE}/lib
+		    export GSLINCDIR=${ACC_BASE}/packages/${BUILD_TYPE}/include
+		    echo -e "Using GSL version ${GSL_VERSION} library in ${ACC_BASE}/packages/${BUILD_TYPE}/lib\n"
+		elif [ "${OUTPUT_DIR}/lib/libgsl*" ] ; then
+		    export GSLLIBDIR=${OUTPUT_DIR}/lib
+		    export GSLINCDIR=${OUTPUT_DIR}/include
+		    echo -e "Using GSL version ${GSL_VERSION} library in ${OUTPUT_DIR}/lib\n"
+		else
+		    echo -e "Required GSL version ${GSL_VERSION} not found, exiting...\n"
+		    exit 72
+		fi
 	fi
-
-	if ( [ -d ${ACC_BASE}/packages ] && [[ "${ACC_BASE}/packages/${BUILD_TYPE}/lib/libgsl*" ]] ) ; then
-	    export GSLLIBDIR=${ACC_BASE}/packages/${BUILD_TYPE}/lib
-	    export GSLINCDIR=${ACC_BASE}/packages/${BUILD_TYPE}/include
-	    echo -e "Using GSL version ${GSL_VERSION} library in ${ACC_BASE}/packages/${BUILD_TYPE}/lib\n"
-	elif [ "${OUTPUT_DIR}/lib/libgsl*" ] ; then
-	    export GSLLIBDIR=${OUTPUT_DIR}/lib
-	    export GSLINCDIR=${OUTPUT_DIR}/include
-	    echo -e "Using GSL version ${GSL_VERSION} library in ${OUTPUT_DIR}/lib\n"
-	else
-	    echo -e "Required GSL version ${GSL_VERSION} not found, exiting...\n"
-	    exit 72
-	fi
-
 	[ "${ACC_ENABLE_OPENMP}" == "Y" ] && CONFIG_OPTIONS="--enable-openmp"
 
 	export gsl_LIBS="-L${GSLLIBDIR} -lgsl -lgslcblas -lm"
diff --git a/sim_utils/plot/display_size_and_resolution.c b/sim_utils/plot/display_size_and_resolution.c
index 60a66de8..b3f262c5 100644
--- a/sim_utils/plot/display_size_and_resolution.c
+++ b/sim_utils/plot/display_size_and_resolution.c
@@ -34,6 +34,15 @@ void display_size_and_res(int ix_screen, double* x_size, double* y_size, double*
 #include <X11/Xwindows.h>
 #endif
 
+// Fix for OSX X11 issue with conda-forge build
+#include <X11/Xfuncproto.h>
+#ifndef _X_SENTINEL
+# define _X_SENTINEL(x)
+#endif
+#ifndef _X_DEPRECATED
+# define _X_DEPRECATED
+#endif
+
 #include <X11/Xlib.h>
 #include <stdio.h>
 #include <stdlib.h>
diff --git a/tao/cmake.tao b/tao/cmake.tao
index e78da534..775012a4 100644
--- a/tao/cmake.tao
+++ b/tao/cmake.tao
@@ -12,10 +12,16 @@ SET (LINK_LIBS
   ${ACC_BMAD_LINK_LIBS}
 )
 
-IF (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
+IF (${CMAKE_SYSTEM_NAME} MATCHES "Darwin" AND $ENV{ACC_USE_MACPORTS} MATCHES "Y")
   link_directories(/opt/local/lib)
 ENDIF ()
 
+# If this is a conda build we must expand the library search
+# with the lib folder
+IF ($ENV{ACC_CONDA_BUILD})
+  link_directories($ENV{ACC_CONDA_PATH}/lib)
+ENDIF ()
+
 IF ($ENV{ACC_PLOT_PACKAGE} MATCHES "plplot")
   IF (NOT ${MSYS})
   SET (SHARED_LINK_LIBS
diff --git a/tao/customization/cmake.custom_tao b/tao/customization/cmake.custom_tao
index da83fe0d..8ad4217e 100644
--- a/tao/customization/cmake.custom_tao
+++ b/tao/customization/cmake.custom_tao
@@ -12,10 +12,16 @@ SET (LINK_LIBS
   ${ACC_BMAD_LINK_LIBS}
 )
 
-IF (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
+IF (${CMAKE_SYSTEM_NAME} MATCHES "Darwin" AND $ENV{ACC_USE_MACPORTS} MATCHES "Y")
   link_directories(/opt/local/lib)
 ENDIF ()
 
+# If this is a conda build we must expand the library search
+# with the lib folder
+IF ($ENV{ACC_CONDA_BUILD})
+  link_directories($ENV{ACC_CONDA_PATH}/lib)
+ENDIF ()
+
 IF ($ENV{ACC_PLOT_PACKAGE} MATCHES "plplot")
   IF (NOT ${MSYS})
   SET (SHARED_LINK_LIBS
diff --git a/util/Distribution_User_Utility_Wrapper b/util/Distribution_User_Utility_Wrapper
index efadc40b..de3547d5 100755
--- a/util/Distribution_User_Utility_Wrapper
+++ b/util/Distribution_User_Utility_Wrapper
@@ -11,11 +11,26 @@
 [ "${ACC_PLOT_PACKAGE}" == "pgplot" ] && export ACC_PLOT_PACKAGE_DIR="PGPLOT" 
 [ "${ACC_PLOT_PACKAGE}" == "plplot" ] && export ACC_PLOT_PACKAGE_DIR="plplot"
 
-# List of Project Directories - Order here matters!
-DIRLIST=( ${ACC_PLOT_PACKAGE_DIR} hdf5 fftw lapack gsl fgsl forest recipes_f-90_LEPP sim_utils xraylib bmad tao cpp_bmad_interface examples bsim util_programs lux regression_tests )
+case "${ACC_CONDA_BUILD}" in
+    "Y" | "y" | "1" )
+    CONDA_BUILD=1
+    ;;
+esac
+
+if ( [[ "${CONDA_BUILD}" ]] ) ; then
+    # For conda build most of the dependencies are pulled from conda-forge
+    # We also remove examples and regression tests from the build list
+
+    # List of Project Directories - Order here matters!
+    DIRLIST=( fgsl forest recipes_f-90_LEPP sim_utils bmad tao cpp_bmad_interface bsim util_programs lux )
+    [ "${ACC_PLOT_PACKAGE}" == "plplot" ] && DIRLIST=( plplot ${DIRLIST[*]} )
+else
+    # List of Project Directories - Order here matters!
+    DIRLIST=( ${ACC_PLOT_PACKAGE_DIR} hdf5 fftw lapack gsl fgsl forest recipes_f-90_LEPP sim_utils xraylib bmad tao cpp_bmad_interface examples bsim util_programs lux regression_tests )
 
-# Build OpenMPI, if requested
-[ "${ACC_ENABLE_MPI}" == "Y" ] && DIRLIST=( openmpi ${DIRLIST[*]} )
+    # Build OpenMPI, if requested
+    [ "${ACC_ENABLE_MPI}" == "Y" ] && DIRLIST=( openmpi ${DIRLIST[*]} )
+fi
 
 # General Distribution Build Function
 func_dist_build () { 
diff --git a/util/acc_build_common b/util/acc_build_common
index 8579eee2..05750bff 100755
--- a/util/acc_build_common
+++ b/util/acc_build_common
@@ -130,10 +130,15 @@ func_set_openmp_flags () {
 
     case "${ACC_ENABLE_OPENMP}" in
 	"Y" | "y" | "1" )
+	    if ( [[ "${CONDA_BUILD}" ]] ) ; then
+                export CFLAGS="${CFLAGS} -L${ACC_CONDA_PATH}/lib -I${ACC_CONDA_PATH}/include"
+                export FCFLAGS="${FFLAGS} -L${ACC_CONDA_PATH}/lib -I${ACC_CONDA_PATH}/include"
+                export LDFLAGS="-L${ACC_CONDA_PATH}/lib -Wl,-rpath,${ACC_CONDA_PATH}/lib ${LDFLAGS}"
+	    fi
 	    export CFLAGS="-fopenmp ${CFLAGS}"
 	    if ( [ "${FC}" == "gfortran" ] ) ; then
-		export FCFLAGS="-fopenmp"
-		export LDFLAGS="-lgomp"
+		export FCFLAGS="-fopenmp ${FCFLAGS}"
+		export LDFLAGS="-lgomp ${LDFLAGS}"
 	    elif [ "${IFORT_MAJOR_VERSION}" ] ; then
 		if [ "${IFORT_MAJOR_VERSION}" -gt 15 ] ; then
 		    export FCFLAGS="-qopenmp" 
@@ -162,6 +167,15 @@ func_set_fpic_flags () {
 # Function to check for required MacPorts install on Mac OS X
 
 func_check_macports () {
+    # We don't need MacPorts for CONDA builds
+    if ( [[ "${CONDA_BUILD}" ]] ) ; then
+           return
+    fi
+
+    # We don't need MacPorts if not using it
+    if ( [[ ! "${USE_MACPORTS}" ]] ) ; then
+           return
+    fi
 
     if ( [ `uname` == "Darwin" ] ) ; then
 	if ( [ "$(type gcc &> /dev/null ; echo $?)" -eq 0 ] ) ; then
@@ -397,6 +411,10 @@ func_check_fortran_version () {
 # Function to check minimium version of GNU Utility Programs needed, install which is needed
     
 func_install_utilities () {
+    # We don't need to install utilities for CONDA builds
+    if ( [[ "${CONDA_BUILD}" ]] ) ; then
+           return
+    fi
 
     UTIL_DIR=${OUTPUT_DIR}/gnu_utilities
     UTIL_SRC_DIR=${BASE_DIR}/gnu_utilities_src
@@ -607,7 +625,7 @@ func_set_c_flags () {
 	export LDFLAGS="${LDFLAGS}"
     elif ( [ `uname` == "Darwin" ] ) ; then
 	export CFLAGS="-std=gnu99 -Wall -fPIC -Wno-trigraphs -Wno-unused -g ${CFLAGS}"
-	export LDFLAGS="-v"
+	export LDFLAGS="-v ${LDFLAGS}"
     else
 	export CFLAGS="-std=gnu99 -Wall -Wno-trigraphs -Wno-unused -g ${CFLAGS}"
 	export LDFLAGS="${LDFLAGS}"
@@ -715,6 +733,17 @@ func_cleanup_variables () {
 
 # Main script
 
+case "${ACC_CONDA_BUILD}" in
+    "Y" | "y" | "1" )
+        CONDA_BUILD=1
+        ;;
+esac
+case "${ACC_USE_MACPORTS}" in
+    "Y" | "y" | "1" )
+        USE_MACPORTS=1
+        ;;
+esac
+
 if ( [ "${1}" == "-debug" ] || [ "${1}" == "-production" ] ) ; then
 
     export BUILD_TYPE=$(echo ${1} | cut -d- -f2)
diff --git a/util/build_flags_config b/util/build_flags_config
index 1be42172..e9e403e1 100644
--- a/util/build_flags_config
+++ b/util/build_flags_config
@@ -15,7 +15,8 @@ fi
 # Set base Bmad Library Linker Flags as updated by dcs16 in RT#56661
 export ACC_BMAD_LINK_LIBS="xrlf03;xrl;recipes_f-90_LEPP;forest;fgsl;gsl;gslcblas;lapack95;lapack;blas;hdf5hl_fortran;hdf5_hl;hdf5_fortran;hdf5;fftw3;fftw3_omp"
 
-# Set base Linker Flags for C++ stdc++, as per RT#58127  
-export STDCXX_LINK_LIBS="stdc++"
-export STDCXX_LINK_FLAGS="-lstdc++"
-
+if [ "${ACC_CONDA_BUILD}" != "Y" ] ; then
+    # Set base Linker Flags for C++ stdc++, as per RT#58127
+    export STDCXX_LINK_LIBS="stdc++"
+    export STDCXX_LINK_FLAGS="-lstdc++"
+fi
diff --git a/util/dist_prefs b/util/dist_prefs
index 948f68f7..619a6ca2 100644
--- a/util/dist_prefs
+++ b/util/dist_prefs
@@ -158,3 +158,31 @@ export ACC_ENABLE_PROFILING="N"
 #-----------------------------------------------------------
 export ACC_SET_GMAKE_JOBS="2"
 
+
+#-----------------------------------------------------------
+# By default the conda build flag is off.
+# Setting the variable ACC_CONDA_BUILD here to "Y" will
+# enable the compilation path assuming external
+# dependencies from the system and it will also reduce
+# the number of targets to only essential pieces.
+# E.g.: regression tests are not compiled
+#-----------------------------------------------------------
+export ACC_CONDA_BUILD="N"
+
+
+#-----------------------------------------------------------
+# If using ACC_CONDA_BUILD configure here the path to your
+# environment.
+#-----------------------------------------------------------
+export ACC_CONDA_PATH="${CONDA_PREFIX}"
+
+
+#-----------------------------------------------------------
+# By default this flag is on.
+# Setting the variable ACC_USE_MACPORTS here to "Y" will
+# enable the MacPorts path (/opt/local/) to be added to
+# library search path.
+# This option is only valid for MacOS (Darwin).
+#-----------------------------------------------------------
+export ACC_USE_MACPORTS="Y"
+
diff --git a/util/dist_source_me b/util/dist_source_me
index f771c232..3992f105 100644
--- a/util/dist_source_me
+++ b/util/dist_source_me
@@ -42,6 +42,11 @@ func_set_os_env () {
 
     export ACC_COMPILER_TOOLSET=default
 
+    if ( [[ "${CONDA_BUILD}" ]] ) ; then
+        # No need to set os env for Conda Build.
+        return;
+    fi
+
     if ( [ $(uname -o &> /dev/null ; echo $?) -eq 0 ] ) ; then
 
         # Workaround for $(uname -m) == x86_64 on Msys2/MinGW-w64-i686
@@ -72,9 +77,11 @@ func_set_os_env () {
     # For Mac OS X "Darwin"
     if [ "$(uname)" == "Darwin" ] ; then
 	# Force MacPorts gcc/g++ as GNU compiler
-	if [ -e /opt/local/bin/gcc ] ; then
-	    export CC=gcc
-	    export CXX=g++
+	if ( [[ "${USE_MACPORTS}" ]] ) ; then
+		if [ -e /opt/local/bin/gcc ] ; then
+		    export CC=gcc
+		    export CXX=g++
+		fi
 	fi
     fi
 }
@@ -341,6 +348,11 @@ func_add_bmad_path () {
 
     export PATH=${USER_PATH}
 
+    if ( [[ "${CONDA_BUILD}" ]] ) ; then
+        export LD_LIBRARY_PATH=${ACC_CONDA_PATH}/lib:${LD_LIBRARY_PATH}
+    fi
+
+
     if [ ${LD_LIBRARY_PATH} ] ; then
 	USER_LIB_PATH_LIST=$(echo ${LD_LIBRARY_PATH} | sed s/:/\ /g)
 
@@ -376,7 +388,17 @@ func_add_bmad_path () {
     fi
 }
 
+case "${ACC_CONDA_BUILD}" in
+    "Y" | "y" | "1" )
+        CONDA_BUILD=1
+        ;;
+esac
 
+case "${ACC_USE_MACPORTS}" in
+    "Y" | "y" | "1" )
+        USE_MACPORTS=1
+        ;;
+esac
 
 #-----------------------------------------------------------------
 # Main Script
@@ -403,6 +425,13 @@ CWD=$(pwd)
 CWD_DIR_CHECK=$(func_is_dir_toplevel ${CWD})
 DIST_BASE_DIR_CHECK=$(func_is_dir_toplevel ${DIST_BASE_DIR})
 
+
+if ( [[ "${CONDA_BUILD}" ]] ) ; then
+    DIST_SETUP_LOG=/dev/stdout
+    DIST_SETUP_QUIET="Y"
+fi
+
+
 if ( [ "${CWD_DIR_CHECK}" == "Y" ] && [[ ! ${CWD} -ef ${DIST_BASE_DIR} ]]) ; then
 
     [ ! -z "${DIST_BASE_DIR}" ] && echo -e "\n-----------------------------------------------------" \
@@ -416,7 +445,9 @@ if ( [ "${CWD_DIR_CHECK}" == "Y" ] && [[ ! ${CWD} -ef ${DIST_BASE_DIR} ]]) ; the
     func_set_os_env
     func_set_bmad_env
     func_add_bmad_path
-    func_check_fortran_version
+    if ( [[ ! "${CONDA_BUILD}" ]] ) ; then
+        func_check_fortran_version
+    fi
 
 elif ( [ "${DIST_BASE_DIR_CHECK}" == "Y" ] ) ; then
     echo -e "\nThe working directory of the Bmad Distribution tree is defined by DIST_BASE_DIR." \
@@ -425,7 +456,9 @@ elif ( [ "${DIST_BASE_DIR_CHECK}" == "Y" ] ) ; then
     func_set_os_env
     func_set_bmad_env
     func_add_bmad_path
-    func_check_fortran_version
+    if ( [[ ! "${CONDA_BUILD}" ]] ) ; then
+        func_check_fortran_version
+    fi
 
 else
     echo -e "\nERROR - Cannot Enable the Bmad Distribution Environment.\n" \
@@ -454,4 +487,6 @@ echo -e "     https://wiki.classe.cornell.edu/ACC/ACL/OffsiteDoc\n" \
 #-----------------------------------------------------------------
 # Display Logfile, unless requested not to.
 #-----------------------------------------------------------------
-[ "${DIST_SETUP_QUIET}" != "Y" ] && cat ${DIST_SETUP_LOG}
+if ( [[ ! "${CONDA_BUILD}" ]] ) ; then
+    [ "${DIST_SETUP_QUIET}" != "Y" ] && cat ${DIST_SETUP_LOG}
+fi
