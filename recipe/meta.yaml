{% set name = "bmad" %}
{% set version = "20241019-0" %}

{% set build = 0 %}
# ensure mpi is defined (needed for conda-smithy recipe-lint)
{% set mpi = mpi or 'nompi' %}

{% if mpi == 'nompi' %}
# prioritize nompi variant via build number
{% set build = build + 100 %}
{% endif %}

package:
  name: {{ name|lower }}
  version: {{ version | replace("-", ".") }}

source:
  url: https://github.com/bmad-sim/bmad-ecosystem/releases/download/{{ version }}/bmad_dist.tar.gz
  sha256: f062103697465d8f160982a4218d696a0793765a3f34d26f2b3dfd88a57c9a00

build:
  number: {{ build }}
  skip: true  # [win]

  # add build string so packages can depend on
  # mpi or nompi variants explicitly:
  # `pkg * mpi_mpich_*` for mpich
  # `pkg * mpi_*` for any mpi
  # `pkg * nompi_*` for no mpi

  {% if build_type == "debug" %}
  {% set debug = "_debug" %}
  {% else %}
  {% set debug = "" %}
  {% endif %}

  {% if mpi != 'nompi' %}
  {% set mpi_prefix = "mpi_" + mpi %}
  {% else %}
  {% set mpi_prefix = "nompi" %}
  {% endif %}

  string: {{ mpi_prefix }}{{ debug }}_h{{ PKG_HASH }}_{{ build }}

  {% if mpi != 'nompi' %}
  run_exports:
    - {{ name }} * {{ mpi_prefix }}{{ debug }}_*
  {% endif %}

requirements:
  build:
    - {{ compiler('c') }}
    - {{ stdlib("c") }}
    - {{ compiler('cxx') }}
    - {{ compiler('fortran') }}
    - cmake
    - make
    - automake
    - autoconf
    - gnuconfig   # [unix]
    - libtool
    - m4
    - pkg-config
    - llvm-openmp  # [osx]
    - libgomp      # [linux]
    - openmpi  # [mpi == "openmpi" and (build_platform != target_platform)]
    - python
  host:
    - readline
    - ncurses
    - cairo
    - pango
    - xorg-libxt
    - pgplot
    - hdf5 {{ hdf5 }} {{ mpi_prefix }}*
    - xorg-libx11
    - xorg-xproto
    - fftw
    - openblas
    - libcblas
    - liblapack
    - lapack95
    - gsl
    - fgsl
    - xraylib
    - {{ mpi }}  # [mpi != 'nompi']
  run:
    - libblas * *openblas
    - openblas
    - pgplot
    - lapack95
    - fgsl
    - xorg-xproto
    - {{ mpi }}  # [mpi != 'nompi']

test:
  requires:
    - python
  commands:
    - tao -help  # [build_platform == target_platform]
    - python -c 'import ctypes.util; assert ctypes.util.find_library("tao") is not None'  # [build_platform == target_platform]
    - python -c 'import ctypes, ctypes.util; ctypes.CDLL(ctypes.util.find_library("tao"))'  # [build_platform == target_platform]

about:
  home: https://www.classe.cornell.edu/bmad
  license: GPL-3.0-or-later
  license_family: GPL
  license_file: bmad/Copyright
  summary: Bmad is an object oriented, open source, subroutine library for relativistic charged-particle dynamics simulations in accelerators and storage rings.
  description: |
    Bmad has been developed at Cornell University's Laboratory for Elementary
    Particle Physics and has been in use since the mid 1990s.
    Bmad has a wide range of routines to do many things.
    Bmad can be used to study both single and multi-particle
    beam dynamics. It has routines to track both particles and
    macroparticles. Bmad has various tracking algorithms including
    Runge-Kutta and symplectic (Lie algebraic) integration.
    Wakefields, and radiation excitation and damping can be simulated.
    Bmad has routines for calculating transfer matrices, emittances,
    Twiss parameters, dispersion, coupling, etc.
  doc_url: https://www.classe.cornell.edu/bmad/manual.html

extra:
  recipe-maintainers:
    - hhslepicka
    - ChristopherMayes
    - ken-lauer
